/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * si-red-backend
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetOrCreateMakeId200,
  GetOrCreateMakeIdParams,
  MakeResponse
} from '.././schemas';

import { customMutator } from '.././customMutator';




export const getAllMakes = (
    
 signal?: AbortSignal
) => {
      
      
      return customMutator<MakeResponse[]>(
      {url: `/makes`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllMakesQueryKey = () => {
    return [`/makes`] as const;
    }

    
export const getGetAllMakesQueryOptions = <TData = Awaited<ReturnType<typeof getAllMakes>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMakes>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllMakesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllMakes>>> = ({ signal }) => getAllMakes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllMakes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllMakesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllMakes>>>
export type GetAllMakesQueryError = unknown


export function useGetAllMakes<TData = Awaited<ReturnType<typeof getAllMakes>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMakes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMakes>>,
          TError,
          Awaited<ReturnType<typeof getAllMakes>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMakes<TData = Awaited<ReturnType<typeof getAllMakes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMakes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllMakes>>,
          TError,
          Awaited<ReturnType<typeof getAllMakes>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllMakes<TData = Awaited<ReturnType<typeof getAllMakes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMakes>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllMakes<TData = Awaited<ReturnType<typeof getAllMakes>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllMakes>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllMakesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getOrCreateMakeId = (
    params: GetOrCreateMakeIdParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<GetOrCreateMakeId200>(
      {url: `/makes/find-or-create-make`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetOrCreateMakeIdQueryKey = (params: GetOrCreateMakeIdParams,) => {
    return [`/makes/find-or-create-make`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrCreateMakeIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrCreateMakeId>>, TError = unknown>(params: GetOrCreateMakeIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateMakeId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrCreateMakeIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrCreateMakeId>>> = ({ signal }) => getOrCreateMakeId(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrCreateMakeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrCreateMakeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrCreateMakeId>>>
export type GetOrCreateMakeIdQueryError = unknown


export function useGetOrCreateMakeId<TData = Awaited<ReturnType<typeof getOrCreateMakeId>>, TError = unknown>(
 params: GetOrCreateMakeIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateMakeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrCreateMakeId>>,
          TError,
          Awaited<ReturnType<typeof getOrCreateMakeId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrCreateMakeId<TData = Awaited<ReturnType<typeof getOrCreateMakeId>>, TError = unknown>(
 params: GetOrCreateMakeIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateMakeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrCreateMakeId>>,
          TError,
          Awaited<ReturnType<typeof getOrCreateMakeId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrCreateMakeId<TData = Awaited<ReturnType<typeof getOrCreateMakeId>>, TError = unknown>(
 params: GetOrCreateMakeIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateMakeId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetOrCreateMakeId<TData = Awaited<ReturnType<typeof getOrCreateMakeId>>, TError = unknown>(
 params: GetOrCreateMakeIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateMakeId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrCreateMakeIdQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMakeById = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customMutator<MakeResponse>(
      {url: `/makes/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetMakeByIdQueryKey = (id: number,) => {
    return [`/makes/${id}`] as const;
    }

    
export const getGetMakeByIdQueryOptions = <TData = Awaited<ReturnType<typeof getMakeById>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMakeById>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMakeByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMakeById>>> = ({ signal }) => getMakeById(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMakeById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMakeByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMakeById>>>
export type GetMakeByIdQueryError = unknown


export function useGetMakeById<TData = Awaited<ReturnType<typeof getMakeById>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMakeById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMakeById>>,
          TError,
          Awaited<ReturnType<typeof getMakeById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMakeById<TData = Awaited<ReturnType<typeof getMakeById>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMakeById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMakeById>>,
          TError,
          Awaited<ReturnType<typeof getMakeById>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMakeById<TData = Awaited<ReturnType<typeof getMakeById>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMakeById>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMakeById<TData = Awaited<ReturnType<typeof getMakeById>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMakeById>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMakeByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



