/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * si-red-backend
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetOrCreateModelId200,
  GetOrCreateModelIdParams,
  ModelResponse
} from '.././schemas';

import { customMutator } from '../../lib/api/customMutator';




export const getAllModelsByMakeId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customMutator<ModelResponse[]>(
      {url: `/models/bymake/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAllModelsByMakeIdQueryKey = (id: number,) => {
    return [`/models/bymake/${id}`] as const;
    }

    
export const getGetAllModelsByMakeIdQueryOptions = <TData = Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllModelsByMakeIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllModelsByMakeId>>> = ({ signal }) => getAllModelsByMakeId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllModelsByMakeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAllModelsByMakeId>>>
export type GetAllModelsByMakeIdQueryError = unknown


export function useGetAllModelsByMakeId<TData = Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllModelsByMakeId>>,
          TError,
          Awaited<ReturnType<typeof getAllModelsByMakeId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllModelsByMakeId<TData = Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllModelsByMakeId>>,
          TError,
          Awaited<ReturnType<typeof getAllModelsByMakeId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllModelsByMakeId<TData = Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllModelsByMakeId<TData = Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllModelsByMakeId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllModelsByMakeIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getOrCreateModelId = (
    params: GetOrCreateModelIdParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<GetOrCreateModelId200>(
      {url: `/models/find-or-create-model`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetOrCreateModelIdQueryKey = (params: GetOrCreateModelIdParams,) => {
    return [`/models/find-or-create-model`, ...(params ? [params]: [])] as const;
    }

    
export const getGetOrCreateModelIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrCreateModelId>>, TError = unknown>(params: GetOrCreateModelIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateModelId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrCreateModelIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrCreateModelId>>> = ({ signal }) => getOrCreateModelId(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrCreateModelId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOrCreateModelIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrCreateModelId>>>
export type GetOrCreateModelIdQueryError = unknown


export function useGetOrCreateModelId<TData = Awaited<ReturnType<typeof getOrCreateModelId>>, TError = unknown>(
 params: GetOrCreateModelIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateModelId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrCreateModelId>>,
          TError,
          Awaited<ReturnType<typeof getOrCreateModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrCreateModelId<TData = Awaited<ReturnType<typeof getOrCreateModelId>>, TError = unknown>(
 params: GetOrCreateModelIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateModelId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrCreateModelId>>,
          TError,
          Awaited<ReturnType<typeof getOrCreateModelId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOrCreateModelId<TData = Awaited<ReturnType<typeof getOrCreateModelId>>, TError = unknown>(
 params: GetOrCreateModelIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateModelId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetOrCreateModelId<TData = Awaited<ReturnType<typeof getOrCreateModelId>>, TError = unknown>(
 params: GetOrCreateModelIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOrCreateModelId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOrCreateModelIdQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



