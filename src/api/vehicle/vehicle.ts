/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * si-red-backend
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DeleteVehicle200,
  GetVehiclesParams,
  PartialVehicleInput,
  VehicleInput,
  VehicleResponse
} from '.././schemas';

import { customMutator } from '../../lib/api/customMutator';




export const createVehicle = (
    vehicleInput: VehicleInput,
 signal?: AbortSignal
) => {
      
      
      return customMutator<VehicleResponse>(
      {url: `/vehicles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vehicleInput, signal
    },
      );
    }
  


export const getCreateVehicleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVehicle>>, TError,{data: VehicleInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createVehicle>>, TError,{data: VehicleInput}, TContext> => {

const mutationKey = ['createVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createVehicle>>, {data: VehicleInput}> = (props) => {
          const {data} = props ?? {};

          return  createVehicle(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof createVehicle>>>
    export type CreateVehicleMutationBody = VehicleInput
    export type CreateVehicleMutationError = unknown

    export const useCreateVehicle = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createVehicle>>, TError,{data: VehicleInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createVehicle>>,
        TError,
        {data: VehicleInput},
        TContext
      > => {

      const mutationOptions = getCreateVehicleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getVehicles = (
    params?: GetVehiclesParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<VehicleResponse[]>(
      {url: `/vehicles`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetVehiclesQueryKey = (params?: GetVehiclesParams,) => {
    return [`/vehicles`, ...(params ? [params]: [])] as const;
    }

    
export const getGetVehiclesQueryOptions = <TData = Awaited<ReturnType<typeof getVehicles>>, TError = unknown>(params?: GetVehiclesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicles>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVehiclesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVehicles>>> = ({ signal }) => getVehicles(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVehicles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVehiclesQueryResult = NonNullable<Awaited<ReturnType<typeof getVehicles>>>
export type GetVehiclesQueryError = unknown


export function useGetVehicles<TData = Awaited<ReturnType<typeof getVehicles>>, TError = unknown>(
 params: undefined |  GetVehiclesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVehicles>>,
          TError,
          Awaited<ReturnType<typeof getVehicles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVehicles<TData = Awaited<ReturnType<typeof getVehicles>>, TError = unknown>(
 params?: GetVehiclesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVehicles>>,
          TError,
          Awaited<ReturnType<typeof getVehicles>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVehicles<TData = Awaited<ReturnType<typeof getVehicles>>, TError = unknown>(
 params?: GetVehiclesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicles>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVehicles<TData = Awaited<ReturnType<typeof getVehicles>>, TError = unknown>(
 params?: GetVehiclesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicles>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVehiclesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getVehicle = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customMutator<VehicleResponse>(
      {url: `/vehicles/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetVehicleQueryKey = (id: string,) => {
    return [`/vehicles/${id}`] as const;
    }

    
export const getGetVehicleQueryOptions = <TData = Awaited<ReturnType<typeof getVehicle>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicle>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVehicleQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVehicle>>> = ({ signal }) => getVehicle(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVehicle>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetVehicleQueryResult = NonNullable<Awaited<ReturnType<typeof getVehicle>>>
export type GetVehicleQueryError = unknown


export function useGetVehicle<TData = Awaited<ReturnType<typeof getVehicle>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicle>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVehicle>>,
          TError,
          Awaited<ReturnType<typeof getVehicle>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVehicle<TData = Awaited<ReturnType<typeof getVehicle>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicle>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVehicle>>,
          TError,
          Awaited<ReturnType<typeof getVehicle>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetVehicle<TData = Awaited<ReturnType<typeof getVehicle>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicle>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetVehicle<TData = Awaited<ReturnType<typeof getVehicle>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVehicle>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetVehicleQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateVehicle = (
    id: string,
    partialVehicleInput: PartialVehicleInput,
 ) => {
      
      
      return customMutator<VehicleResponse>(
      {url: `/vehicles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: partialVehicleInput
    },
      );
    }
  


export const getUpdateVehicleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateVehicle>>, TError,{id: string;data: PartialVehicleInput}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateVehicle>>, TError,{id: string;data: PartialVehicleInput}, TContext> => {

const mutationKey = ['updateVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateVehicle>>, {id: string;data: PartialVehicleInput}> = (props) => {
          const {id,data} = props ?? {};

          return  updateVehicle(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof updateVehicle>>>
    export type UpdateVehicleMutationBody = PartialVehicleInput
    export type UpdateVehicleMutationError = unknown

    export const useUpdateVehicle = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateVehicle>>, TError,{id: string;data: PartialVehicleInput}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateVehicle>>,
        TError,
        {id: string;data: PartialVehicleInput},
        TContext
      > => {

      const mutationOptions = getUpdateVehicleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteVehicle = (
    id: string,
 ) => {
      
      
      return customMutator<DeleteVehicle200>(
      {url: `/vehicles/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteVehicleMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVehicle>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteVehicle>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteVehicle'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteVehicle>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteVehicle(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteVehicleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteVehicle>>>
    
    export type DeleteVehicleMutationError = unknown

    export const useDeleteVehicle = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteVehicle>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteVehicle>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteVehicleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    