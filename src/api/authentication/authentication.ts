/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * si-red-backend
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  RefreshRequest,
  RefreshResponse,
  SignInRequest,
  SignInResponse
} from '.././schemas';

<<<<<<< HEAD
import { customMutator } from '.././customMutator';
=======
import { customMutator } from '../../lib/api/customMutator';
>>>>>>> 3dd0dece8a057b4c5c6957bf6b0e44f7a9a97847




export const refresh = (
    refreshRequest: RefreshRequest,
 signal?: AbortSignal
) => {
      
      
      return customMutator<RefreshResponse>(
      {url: `/auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshRequest, signal
    },
      );
    }
  


export const getRefreshMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refresh>>, TError,{data: RefreshRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof refresh>>, TError,{data: RefreshRequest}, TContext> => {

const mutationKey = ['refresh'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refresh>>, {data: RefreshRequest}> = (props) => {
          const {data} = props ?? {};

          return  refresh(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RefreshMutationResult = NonNullable<Awaited<ReturnType<typeof refresh>>>
    export type RefreshMutationBody = RefreshRequest
    export type RefreshMutationError = unknown

    export const useRefresh = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refresh>>, TError,{data: RefreshRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof refresh>>,
        TError,
        {data: RefreshRequest},
        TContext
      > => {

      const mutationOptions = getRefreshMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const signIn = (
    signInRequest: SignInRequest,
 signal?: AbortSignal
) => {
      
      
      return customMutator<SignInResponse>(
      {url: `/auth/signin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInRequest, signal
    },
      );
    }
  


export const getSignInMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: SignInRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: SignInRequest}, TContext> => {

const mutationKey = ['signIn'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signIn>>, {data: SignInRequest}> = (props) => {
          const {data} = props ?? {};

          return  signIn(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignInMutationResult = NonNullable<Awaited<ReturnType<typeof signIn>>>
    export type SignInMutationBody = SignInRequest
    export type SignInMutationError = unknown

    export const useSignIn = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signIn>>, TError,{data: SignInRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof signIn>>,
        TError,
        {data: SignInRequest},
        TContext
      > => {

      const mutationOptions = getSignInMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    