/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * si-red-backend
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddToFavorites200,
  FavoriteRequestBody,
  GetFavoritesParams,
  RemoveFromFavorites200,
  VehicleAttributes
} from '.././schemas';

import { customMutator } from '../../lib/api/customMutator';




export const addToFavorites = (
    favoriteRequestBody: FavoriteRequestBody,
 signal?: AbortSignal
) => {
      
      
      return customMutator<AddToFavorites200>(
      {url: `/favorites`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: favoriteRequestBody, signal
    },
      );
    }
  


export const getAddToFavoritesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToFavorites>>, TError,{data: FavoriteRequestBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof addToFavorites>>, TError,{data: FavoriteRequestBody}, TContext> => {

const mutationKey = ['addToFavorites'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addToFavorites>>, {data: FavoriteRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  addToFavorites(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddToFavoritesMutationResult = NonNullable<Awaited<ReturnType<typeof addToFavorites>>>
    export type AddToFavoritesMutationBody = FavoriteRequestBody
    export type AddToFavoritesMutationError = unknown

    export const useAddToFavorites = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToFavorites>>, TError,{data: FavoriteRequestBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addToFavorites>>,
        TError,
        {data: FavoriteRequestBody},
        TContext
      > => {

      const mutationOptions = getAddToFavoritesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const removeFromFavorites = (
    favoriteRequestBody: FavoriteRequestBody,
 ) => {
      
      
      return customMutator<RemoveFromFavorites200>(
      {url: `/favorites`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: favoriteRequestBody
    },
      );
    }
  


export const getRemoveFromFavoritesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromFavorites>>, TError,{data: FavoriteRequestBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof removeFromFavorites>>, TError,{data: FavoriteRequestBody}, TContext> => {

const mutationKey = ['removeFromFavorites'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeFromFavorites>>, {data: FavoriteRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  removeFromFavorites(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveFromFavoritesMutationResult = NonNullable<Awaited<ReturnType<typeof removeFromFavorites>>>
    export type RemoveFromFavoritesMutationBody = FavoriteRequestBody
    export type RemoveFromFavoritesMutationError = unknown

    export const useRemoveFromFavorites = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromFavorites>>, TError,{data: FavoriteRequestBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeFromFavorites>>,
        TError,
        {data: FavoriteRequestBody},
        TContext
      > => {

      const mutationOptions = getRemoveFromFavoritesMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getFavorites = (
    params: GetFavoritesParams,
 signal?: AbortSignal
) => {
      
      
      return customMutator<VehicleAttributes[]>(
      {url: `/favorites`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetFavoritesQueryKey = (params: GetFavoritesParams,) => {
    return [`/favorites`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFavoritesQueryOptions = <TData = Awaited<ReturnType<typeof getFavorites>>, TError = unknown>(params: GetFavoritesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavorites>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFavoritesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFavorites>>> = ({ signal }) => getFavorites(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFavorites>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFavoritesQueryResult = NonNullable<Awaited<ReturnType<typeof getFavorites>>>
export type GetFavoritesQueryError = unknown


export function useGetFavorites<TData = Awaited<ReturnType<typeof getFavorites>>, TError = unknown>(
 params: GetFavoritesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavorites>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFavorites>>,
          TError,
          Awaited<ReturnType<typeof getFavorites>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFavorites<TData = Awaited<ReturnType<typeof getFavorites>>, TError = unknown>(
 params: GetFavoritesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavorites>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFavorites>>,
          TError,
          Awaited<ReturnType<typeof getFavorites>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFavorites<TData = Awaited<ReturnType<typeof getFavorites>>, TError = unknown>(
 params: GetFavoritesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavorites>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetFavorites<TData = Awaited<ReturnType<typeof getFavorites>>, TError = unknown>(
 params: GetFavoritesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavorites>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFavoritesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



